class ExploitsController < ApplicationController
  before_action :set_exploit, only: %i[ raw download show edit update destroy ]


  # GET /exploits or /exploits.json
  def index
    @exploits = Exploit.all
  end
  def download
    send_file("#{Rails.root.to_s}/public/uploads/#{@exploit.filename}",
  :filename => @exploit.filename,
  :type => "application/*")
  end
  def raw
    if @exploit.heyexploit
    your_data=File.read("#{Rails.root.to_s}/public/uploads/#{@exploit.filename}")
    else
    your_data=""
    end
    send_data(your_data,
  :filename => @exploit.filename,
  :type => "application/text")
  end

  # GET /exploits/1 or /exploits/1.json
  def show
  end

  # GET /exploits/new
  def new
    @exploit = Exploit.new
  end

  # GET /exploits/1/edit
  def edit
  end

  # POST /exploits or /exploits.json
  def create
    @exploit = Exploit.new(exploit_params)

    respond_to do |format|
      if @exploit.save
        format.html { redirect_to exploit_url(@exploit), notice: "Exploit was successfully created." }
        format.json { render :show, status: :created, location: @exploit }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @exploit.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /exploits/1 or /exploits/1.json
  def update
    respond_to do |format|
      if @exploit.update(exploit_params)
        format.html { redirect_to exploit_url(@exploit), notice: "Exploit was successfully updated." }
        format.json { render :show, status: :ok, location: @exploit }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @exploit.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /exploits/1 or /exploits/1.json
  def destroy
    @exploit.destroy

    respond_to do |format|
      format.html { redirect_to exploits_url, notice: "Exploit was successfully destroyed." }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_exploit
      @exploit = Exploit.find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def exploit_params
      params.require(:exploit).permit(:title, :author_id, :verified, :has_app, :no_metasploit, :tag_id, :exploittype_id, :platform_id, :port_id, :author_id, :filename)
    end
end
